- name: Create directory for cloud-init files
  ansible.builtin.file:
    path: "{{ vms.global.cloud_init_server_dir }}/{{ item.name }}"
    state: directory
    mode: '0755'
    group: kvm
    owner: libvirt-qemu
  loop: "{{ vms.instances }}"

- name: Generate meta-data for each VM
  ansible.builtin.template:
    src: "cloud-init/meta-data.j2"
    dest: "{{ vms.global.cloud_init_server_dir }}/{{ item.name }}/meta-data"
    mode: '0644'
  loop: "{{ vms.instances }}"

- name: Generate install-node-exporter.sh from template
  ansible.builtin.template:
    src: "cloud-init/install-node-exporter.sh.j2"
    dest: "{{ vms.global.cloud_init_server_dir }}/install-node-exporter.sh"
    mode: '0644'

- name: Generate connect-runner.sh from template
  ansible.builtin.template:
    src: "cloud-init/connect-runner.sh.j2"
    dest: "{{ vms.global.cloud_init_server_dir }}/connect-runner.sh"
    mode: '0644'

- name: Base64 encode the script and format it
  shell: |
    base64 -w 0 "{{ vms.global.cloud_init_server_dir }}/connect-runner.sh"
  register: encoded_runner_script_output


- name: Base64 encode the script and format it
  shell: |
    base64 -w 0 "{{ vms.global.cloud_init_server_dir }}/install-node-exporter.sh"
  register: encoded_node_script_output

- name: Generate user-data for each VM
  ansible.builtin.template:
    src: "cloud-init/user-data.j2"
    dest: "{{ vms.global.cloud_init_server_dir }}/{{ item.name }}/user-data"
    mode: '0644'
  loop: "{{ vms.instances }}"
  vars:
    runner_script: "{{ encoded_runner_script_output.stdout }}"
    node_exporter_script: "{{ encoded_node_script_output.stdout }}"

- name: Generate ISO image for each VM
  shell: |
    genisoimage -output {{ vms.global.cloud_init_server_dir }}/{{ item.name }}-cinit.iso -volid cidata -joliet -rock {{ vms.global.cloud_init_server_dir }}/{{ item.name }}/user-data {{ vms.global.cloud_init_server_dir }}/{{ item.name }}/meta-data
  loop: "{{ vms.instances }}"
