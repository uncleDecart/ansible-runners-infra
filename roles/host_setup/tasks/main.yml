- name: Install required packages
  apt:
    name:
      - qemu-kvm
      - qemu-user
      - qemu-user-static
      - binfmt-support
      - libvirt-daemon-system
      - virt-manager
      - bridge-utils
      - apt-transport-https
      - curl
      - software-properties-common
      - genisoimage
    state: present
    update_cache: yes

- name: Install Docker Engine
  apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
    state: latest
    update_cache: yes

- name: Ensure Docker service is running and enabled
  service:
    name: docker
    state: started
    enabled: yes

- name: Add user(s) to docker group
  user:
    name: "{{ ansible_user }}"
    groups: docker
    append: yes

- name: Check if base image exists
  become: true
  stat:
    path: "/var/lib/libvirt/images/ubuntu-base.qcow2"
  register: ubuntu_base_image

- name: Download Ubuntu base image if not exist
  become: true
  get_url:
    url: "{{ vms.global.image_url }}"
    dest: "/var/lib/libvirt/images/ubuntu-base.qcow2"
    mode: '0644'
  when: not ubuntu_base_image.stat.exists

- name: Resize Ubuntu base image
  become: true
  command: qemu-img resize /var/lib/libvirt/images/ubuntu-base.qcow2 +{{ vms.global.disk.size }}
  when: not ubuntu_base_image.stat.exists

- name: Clean up previous VMs
  ansible.builtin.include_tasks: cleanup.yml  

- name: Create VM disk image for {{ item.name }}
  become: true
  command: >
    qemu-img create -f qcow2 -b /var/lib/libvirt/images/ubuntu-base.qcow2 -F qcow2 {{ vms.global.disk.folder}}/{{ item.name }}
  loop: "{{ vms.instances }}"

- name: Set up cloud-init related data
  ansible.builtin.include_tasks: cloud_init.yml

- name: Create VM with cloud-init for x84_64
  shell: >
    virt-install --name {{ item.name }}
    --ram {{ item.ram }} --vcpus={{ item.cpu_count }},cpuset={{ item.cpu }}
    --disk path={{ vms.global.disk.folder}}/{{ item.name }},format=qcow2
    --os-variant=ubuntu22.04
    --graphics none
    --cpu host-passthrough,+invtsc
    --noautoconsole
    --boot hd
    --network default
    --cloud-init user-data="{{vms.global.cloud_init_server_dir}}/{{ item.name }}/user-data",meta-data="{{vms.global.cloud_init_server_dir}}/{{ item.name }}/meta-data"
    --import
  loop: "{{ vms.instances }}"
  when: not arm_runners

- name: create varstore
  become: true
  command: >
    truncate -s 64m /var/lib/libvirt/images/varstore.img
  when: arm_runners

- name: create efi
  become: true
  command: >
    truncate -s 64m /var/lib/libvirt/images/efi.img
  when: arm_runners

- name: flush efi
  become: true
  command: >
    dd if=/usr/share/qemu-efi-aarch64/QEMU_EFI.fd of=/var/lib/libvirt/images/efi.img conv=notrunc
  when: arm_runners

- name: Create VM with cloud-init for arm
  shell: >
    virt-install --name {{ item.name }}
    --ram {{ item.ram }}
    --vcpus={{ item.cpu_count }}
    --disk path={{ vms.global.disk.folder}}/{{ item.name }},format=qcow2,bus=virtio
    --cpu host-passthrough
    --graphics none
    --arch aarch64
    --noautoconsole
    --boot hd
    --machine virt
    --os-variant ubuntu22.04
    --boot uefi,loader=/var/lib/libvirt/images/efi.img,nvram=/var/lib/libvirt/images/varstore.img
    --disk path={{ vms.global.cloud_init_server_dir }}/{{ item.name }}-cinit.iso,device=cdrom,bus=sata \
    --network default,model=virtio
    --import

  loop: "{{ vms.instances }}"
  when: arm_runners

